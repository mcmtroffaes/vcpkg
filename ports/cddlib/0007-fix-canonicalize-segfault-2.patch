From c65b0176d1c460fae6822cb2c2a6870183bc70ba Mon Sep 17 00:00:00 2001
From: "Matthias C. M. Troffaes" <matthias.troffaes@gmail.com>
Date: Tue, 24 Sep 2024 22:20:26 +0100
Subject: [PATCH 3/3] More NULL assignments to non-initialized pointers.

---
 lib-src/cddlp.c | 64 ++++++++++++++++++++++++-------------------------
 1 file changed, 32 insertions(+), 32 deletions(-)

diff --git a/lib-src/cddlp.c b/lib-src/cddlp.c
index 09ef63e..4576f85 100644
--- a/lib-src/cddlp.c
+++ b/lib-src/cddlp.c
@@ -246,8 +246,8 @@ dd_LPPtr dd_Matrix2Feasibility2(dd_MatrixPtr M, dd_rowset R, dd_rowset S, dd_Err
 {
   dd_rowrange m, i, irev, linc;
   dd_colrange d, j;
-  dd_LPType *lp;
-  dd_rowset L;
+  dd_LPType *lp=NULL;
+  dd_rowset L=NULL;
   dd_boolean localdebug=dd_FALSE;
 
   *err=dd_NoError;
@@ -1083,8 +1083,8 @@ void dd_FindLPBasis2(dd_rowrange m_size,dd_colrange d_size,
   */
   int chosen,stop;
   long pivots_p0=0,rank;
-  dd_colset ColSelected,DependentCols;
-  dd_rowset RowSelected, NopivotRow;
+  dd_colset ColSelected=NULL,DependentCols=NULL;
+  dd_rowset RowSelected=NULL, NopivotRow=NULL;
   mytype val;
   dd_boolean localdebug=dd_FALSE;
 
@@ -2566,9 +2566,9 @@ dd_rowset dd_RedundantRows(dd_MatrixPtr M, dd_ErrorType *error)  /* 092 */
 {
   dd_rowrange i,m;
   dd_colrange d;
-  dd_rowset redset;
-  dd_MatrixPtr Mcopy;
-  dd_Arow cvec; /* certificate */  
+  dd_rowset redset=NULL;
+  dd_MatrixPtr Mcopy=NULL;
+  dd_Arow cvec=NULL; /* certificate */  
   dd_boolean localdebug=dd_FALSE;
 
   m=M->rowsize;
@@ -2606,8 +2606,8 @@ dd_boolean dd_MatrixRedundancyRemove(dd_MatrixPtr *M, dd_rowset *redset,dd_rowin
  
   dd_rowrange i,k,m,m1;
   dd_colrange d;
-  dd_rowset redset1;
-  dd_rowindex newpos1;
+  dd_rowset redset1=NULL;
+  dd_rowindex newpos1=NULL;
   dd_MatrixPtr M1=NULL;
   dd_Arow cvec; /* certificate */ 
   dd_boolean success=dd_FALSE, localdebug=dd_FALSE;
@@ -2821,9 +2821,9 @@ dd_rowset dd_SRedundantRows(dd_MatrixPtr M, dd_ErrorType *error)  /* 093a */
 {
   dd_rowrange i,m;
   dd_colrange d;
-  dd_rowset redset;
-  dd_MatrixPtr Mcopy;
-  dd_Arow cvec; /* certificate */  
+  dd_rowset redset=NULL;
+  dd_MatrixPtr Mcopy=NULL;
+  dd_Arow cvec=NULL; /* certificate */  
   dd_boolean localdebug=dd_FALSE;
 
   m=M->rowsize;
@@ -2861,17 +2861,17 @@ dd_rowset dd_RedundantRowsViaShooting(dd_MatrixPtr M, dd_ErrorType *error)  /* 0
 
   dd_rowrange i,m, ired, irow=0;
   dd_colrange j,k,d;
-  dd_rowset redset;
-  dd_rowindex rowflag; 
+  dd_rowset redset=NULL;
+  dd_rowindex rowflag=NULL; 
     /* ith comp is negative if the ith inequality (i-1 st row) is redundant.
                    zero     if it is not decided.
                    k > 0    if it is nonredundant and assigned to the (k-1)th row of M1.
     */
-  dd_MatrixPtr M1;
-  dd_Arow shootdir, cvec=NULL;
-  dd_LPPtr lp0, lp;
-  dd_LPSolutionPtr lps; 
-  dd_ErrorType err;
+  dd_MatrixPtr M1=NULL;
+  dd_Arow shootdir=NULL, cvec=NULL;
+  dd_LPPtr lp0=NULL, lp=NULL;
+  dd_LPSolutionPtr lps=NULL; 
+  dd_ErrorType err=dd_NoError;
   dd_LPSolverType solver=dd_DualSimplex; 
   dd_boolean localdebug=dd_FALSE;
 
@@ -2974,8 +2974,8 @@ dd_SetFamilyPtr dd_Matrix2Adjacency(dd_MatrixPtr M, dd_ErrorType *error)  /* 093
   */
   dd_rowrange i,m;
   dd_colrange d;
-  dd_rowset redset;
-  dd_MatrixPtr Mcopy;
+  dd_rowset redset=NULL;
+  dd_MatrixPtr Mcopy=NULL;
   dd_SetFamilyPtr F=NULL;
 
   m=M->rowsize;
@@ -3011,8 +3011,8 @@ dd_SetFamilyPtr dd_Matrix2WeakAdjacency(dd_MatrixPtr M, dd_ErrorType *error)  /*
   */
   dd_rowrange i,m;
   dd_colrange d;
-  dd_rowset redset;
-  dd_MatrixPtr Mcopy;
+  dd_rowset redset=NULL;
+  dd_MatrixPtr Mcopy=NULL;
   dd_SetFamilyPtr F=NULL;
 
   m=M->rowsize;
@@ -3240,8 +3240,8 @@ int dd_FreeOfImplicitLinearity(dd_MatrixPtr M, dd_Arow certificate, dd_rowset *i
 dd_rowset dd_ImplicitLinearityRows(dd_MatrixPtr M, dd_ErrorType *error)  /* 092 */
 {
   dd_colrange d;
-  dd_rowset imp_linset;
-  dd_Arow cvec; /* certificate */
+  dd_rowset imp_linset=NULL;
+  dd_Arow cvec=NULL; /* certificate */
   int foi;
   dd_boolean localdebug=dd_FALSE;
 
@@ -3291,10 +3291,10 @@ dd_ErrorType *error) /* 094 */
    the matrix.    All implicit linearities will be returned by *impl_linset.
 */
   dd_rowrange rank;
-  dd_rowset linrows,ignoredrows,basisrows;
-  dd_colset ignoredcols,basiscols;
+  dd_rowset linrows=NULL,ignoredrows=NULL,basisrows=NULL;
+  dd_colset ignoredcols=NULL,basiscols=NULL;
   dd_rowrange i,k,m;
-  dd_rowindex newpos1;
+  dd_rowindex newpos1=NULL;
   dd_boolean success=dd_FALSE;
   
   linrows=dd_ImplicitLinearityRows(*M, error);
@@ -3465,8 +3465,8 @@ of the submatrix of M consisting of all linearities and implicit linearities.  T
 that the dimension of the polyhedron is M->colsize - set_card(Lbasis) -1.
 */
 
-  dd_rowset S;
-  dd_colset T, Lbasiscols;
+  dd_rowset S=NULL;
+  dd_colset T=NULL, Lbasiscols=NULL;
   dd_boolean success=dd_FALSE;
   dd_rowrange i;
   dd_colrange rank;
@@ -3595,9 +3595,9 @@ arithmetics.
   long pivots0,pivots1,fbasisrank;
   dd_rowrange i,is;
   dd_colrange s,senew,j;
-  static _Thread_local dd_rowindex bflag;
+  static _Thread_local dd_rowindex bflag=NULL;
   static _Thread_local long mlast=0;
-  static _Thread_local dd_rowindex OrderVector;  /* the permutation vector to store a preordered row indices */
+  static _Thread_local dd_rowindex OrderVector=NULL;  /* the permutation vector to store a preordered row indices */
   unsigned int rseed=1;
   mytype val;
   dd_colindex nbtemp;
-- 
2.46.0

